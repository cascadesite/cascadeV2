{"_path":"/","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"","description":"","body":{"type":"root","children":[{"type":"element","tag":"block-hero","props":{":cta":"[\"Games\",\"/games\"]",":secondary":"[\"Open on GitHub â†’\",\"https://github.com/cascadesite/cascadesite.github.io\"]","snippet":"ðŸŒŠ"},"children":[{"type":"element","tag":"template","props":{"v-slot:title":""},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Cascade"}]}]},{"type":"element","tag":"template","props":{"v-slot:description":""},"children":[]},{"type":"element","tag":"template","props":{"v-slot:phrase-container":""},"children":[]}]},{"type":"element","tag":"script","props":{},"children":[{"type":"text","value":"\nasync function getRandomPhrase() {\n    try {\n        const response = await fetch('phrases.json');\n        const phrases = await response.json();\n      \n        const ultraRareIndex = phrases.length - 1;\n        const randomNumber = Math.random();\n      \n        if (randomNumber <= 0.01) {\n            return phrases[ultraRareIndex];\n        } else {\n            const randomIndex = Math.floor(Math.random() * (phrases.length - 1));\n            return phrases[randomIndex];\n        }\n    } catch (error) {\n        console.error('Error fetching phrases:', error);\n        return \"An error occurred. Please try again.\";\n    }\n}\n  \ndocument.addEventListener('DOMContentLoaded', async () => {\n    const phraseContainer = document.querySelector('#phrase-container');\n    const randomPhrase = await getRandomPhrase();\n    phraseContainer.textContent = randomPhrase;\n});\n"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:index.md","_source":"content","_file":"index.md","_stem":"index","_extension":"md"}